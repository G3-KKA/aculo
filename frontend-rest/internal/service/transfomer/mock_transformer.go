// Code generated by mockery v2.43.2. DO NOT EDIT.

package transfomer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTransformer is an autogenerated mock type for the Transformer type
type MockTransformer struct {
	mock.Mock
}

// Transform provides a mock function with given fields: _a0, _a1
func (_m *MockTransformer) Transform(_a0 context.Context, _a1 TransformRequest) (TransformResponse, error) {
	ret := _m.Called(_a0, _a1)
	if len(ret) == 0 {
		panic("no return value specified for Transform")
	}
	
	var r0 TransformResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, TransformRequest) (TransformResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, TransformRequest) TransformResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(TransformResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, TransformRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTransformer creates a new instance of MockTransformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransformer {
	mock := &MockTransformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
