// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock_controller

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	req "master-service/internal/req"
)

// MockKafkaClusterService is an autogenerated mock type for the KafkaClusterService type
type MockKafkaClusterService struct {
	mock.Mock
}

// CreateTopic provides a mock function with given fields: ctx, _a1
func (_m *MockKafkaClusterService) CreateTopic(ctx context.Context, _a1 req.CreateTopicRequest) (req.CreateTopicResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 req.CreateTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, req.CreateTopicRequest) (req.CreateTopicResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, req.CreateTopicRequest) req.CreateTopicResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(req.CreateTopicResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, req.CreateTopicRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockKafkaClusterService creates a new instance of MockKafkaClusterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKafkaClusterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKafkaClusterService {
	mock := &MockKafkaClusterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
