// Code generated by mockery v2.43.2. DO NOT EDIT.

package broker

import (
	domain "aculo/batch-inserter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBrokerAPI is an autogenerated mock type for the BrokerAPI type
type MockBrokerAPI struct {
	mock.Mock
}

// DeleteTopic provides a mock function with given fields: ctx, topic
func (_m *MockBrokerAPI) DeleteTopic(ctx context.Context, topic string) error {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleTopic provides a mock function with given fields: ctx, topic
func (_m *MockBrokerAPI) HandleTopic(ctx context.Context, topic string) (<-chan domain.Log, error) {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for HandleTopic")
	}

	var r0 <-chan domain.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan domain.Log, error)); ok {
		return rf(ctx, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan domain.Log); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan domain.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTopic provides a mock function with given fields: ctx
func (_m *MockBrokerAPI) NewTopic(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewTopic")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopHandling provides a mock function with given fields: ctx, topic
func (_m *MockBrokerAPI) StopHandling(ctx context.Context, topic string) error {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for StopHandling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBrokerAPI creates a new instance of MockBrokerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBrokerAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBrokerAPI {
	mock := &MockBrokerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
