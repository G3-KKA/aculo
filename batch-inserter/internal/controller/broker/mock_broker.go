// Code generated by mockery v2.43.2. DO NOT EDIT.

package broker

import (
	txface "aculo/batch-inserter/internal/interfaces/txface"

	mock "github.com/stretchr/testify/mock"
)

// MockBroker is an autogenerated mock type for the Broker type
type MockBroker struct {
	mock.Mock
}

// Shutdown provides a mock function with given fields:
func (_m *MockBroker) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShuttedDown provides a mock function with given fields:
func (_m *MockBroker) ShuttedDown() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShuttedDown")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Tx provides a mock function with given fields:
func (_m *MockBroker) Tx() (*broker, txface.Commit, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tx")
	}

	var r0 *broker
	var r1 txface.Commit
	var r2 error
	if rf, ok := ret.Get(0).(func() (*broker, txface.Commit, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *broker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*broker)
		}
	}

	if rf, ok := ret.Get(1).(func() txface.Commit); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(txface.Commit)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WrapAPI provides a mock function with given fields:
func (_m *MockBroker) WrapAPI() txface.Tx[BrokerAPI] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WrapAPI")
	}

	var r0 txface.Tx[BrokerAPI]
	if rf, ok := ret.Get(0).(func() txface.Tx[BrokerAPI]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txface.Tx[BrokerAPI])
		}
	}

	return r0
}

// NewMockBroker creates a new instance of MockBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBroker {
	mock := &MockBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
