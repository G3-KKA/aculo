// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	domain "aculo/batch-inserter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryAPI is an autogenerated mock type for the RepositoryAPI type
type MockRepositoryAPI struct {
	mock.Mock
}

// GracefulShutdown provides a mock function with given fields:
func (_m *MockRepositoryAPI) GracefulShutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GracefulShutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendBatch provides a mock function with given fields: ctx, batch
func (_m *MockRepositoryAPI) SendBatch(ctx context.Context, batch []domain.Event) error {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Event) error); ok {
		r0 = rf(ctx, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepositoryAPI creates a new instance of MockRepositoryAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryAPI {
	mock := &MockRepositoryAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
