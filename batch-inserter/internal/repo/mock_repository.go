// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	unifaces "aculo/batch-inserter/internal/unified/unifaces"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Tx provides a mock function with given fields:
func (_m *MockRepository) Tx() (RepositoryAPI, unifaces.TxClose, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tx")
	}

	var r0 RepositoryAPI
	var r1 unifaces.TxClose
	var r2 error
	if rf, ok := ret.Get(0).(func() (RepositoryAPI, unifaces.TxClose, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() RepositoryAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RepositoryAPI)
		}
	}

	if rf, ok := ret.Get(1).(func() unifaces.TxClose); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(unifaces.TxClose)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
